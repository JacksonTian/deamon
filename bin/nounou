#!/usr/bin/env node
'use strict';

const path = require('path');

const nounou = require('../');

const [workerPath, count] = process.argv.slice(2);

const filepath = path.resolve(process.cwd(), workerPath);
const name = path.basename(filepath, '.js');

const pid = process.pid;

function utcTime() {
  return new Date().toUTCString();
}

nounou(filepath, {
  count: parseInt(count, 10) || 1
})
.on('fork', function (worker) {
  console.log(`[${utcTime()}] [master:${pid}] [${name}:${worker.pid}]` +
  ` new worker start`);
})
.on('disconnect', function (worker) {
  console.error(`[${utcTime()}] [master:${pid}] [${name}:${worker.pid}]` +
  ` disconnect, suicide: ${worker.suicide}.`);
})
.on('unexpectedExit', function (worker, code, signal) {
  var message = `${name} ${worker.pid} died (code: ${code}, signal: ${signal})`;
  var err = new Error(message);
  err.name = name + 'DiedError';
  console.error(`${utcTime()} [${pid}] worker exit: ${err.stack}`);
}).on('reachReforkLimit', function () {
  console.error(`${utcTime()} [${pid}] ${name} Too much refork!!!!!!`);
});
